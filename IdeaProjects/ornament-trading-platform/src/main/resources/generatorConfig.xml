<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">
<generatorConfiguration>
    <!--引入外部属性文件-->
    <properties resource="generator.properties"></properties>
    <!--指定数据库驱动JDBC驱动jar包的位置（逆向工程在运行时需要连接数据库，所以需要数据库驱动jar包）-->
    <classPathEntry
            location="${generator.driverLocation}"/>

    <!--
  targetRuntime="MyBatis3Simple":生成简单版的CRUD操作
  MyBatis3:豪华版
  一个数据库对应一个context
  -->
    <context id="default" targetRuntime="MyBatis3">
        <!-- 生成的pojo，将implements Serializable接口，为了符合Mybatis中二级缓存使用的前提条件 -->
        <plugin type="org.mybatis.generator.plugins.SerializablePlugin"></plugin>
        <!--生成mapper.xml时覆盖原来生成过的Mapper.xml文件，而不是继续追加内容-->
        <plugin type="org.mybatis.generator.plugins.UnmergeableXmlMappersPlugin"/>
        <!--设置自动生成的文件是否自动添加注释-->
        <commentGenerator>
            <!--自动生成的文件是否取消自动添加注释：取消自动注释！-->
            <property name="suppressAllComments" value="true"></property>
            <!--是否生成注释代时间戳-->
            <!--<property name="suppressDate" value="true"></property>-->
        </commentGenerator>
        <!-- jdbcConnection：指定如何连接到目标数据库 -->
        <jdbcConnection driverClass="${jdbc.driver}"
                        connectionURL="${jdbc.url}"
                        userId="${jdbc.username}"
                        password="${jdbc.password}">
        </jdbcConnection>

        <!-- Java类型解析器，这边就让他使用默认的类型解析方式
            默认false，就是将JDBC DECIMAL 和 NUMERIC 类型解析为 Integer true，把JDBC DECIMAL
                和 NUMERIC 类型解析为java.math.BigDecimal
        -->
        <javaTypeResolver>
            <property name="forceBigDecimals" value="false"/>
        </javaTypeResolver>

        <!-- javaModelGenerator：指定JavaBean的生成策略
 targetPackage="test.model"：生成JavaBean所在的目标包名
 targetProject="\MBGTestProject\src"：生成JavaBean所在的目标工程，我们指定为当前工程，即src\main\java\即可
 -->
        <javaModelGenerator targetPackage="${generator.targetBeanPackage}"
                            targetProject="${generator.targetProject}">
            <!--是否在当前路径下新加一层schema,eg：false路径com.oop.eksp.user.model， true:com.oop.eksp.user.model.[schemaName]-->
            <property name="enableSubPackages" value="false"/>
            <!-- 从数据库返回的值是否清理前后的空格 -->
            <property name="trimStrings" value="true"/>
        </javaModelGenerator>

        <!-- sqlMapGenerator：sql映射文件的生成策略：对应的mapper.xml文件 -->
        <sqlMapGenerator targetPackage="${generator.targetXmlLocation}"
                         targetProject="./src/main">
            <property name="enableSubPackages" value="false"/>
        </sqlMapGenerator>

        <!-- javaClientGenerator:指定mapper接口所在的位置: 对应的Mapper接口类文件 -->
        <javaClientGenerator type="XMLMAPPER" targetPackage="${generator.targetMapperPackage}"
                             targetProject="${generator.targetProject}">
            <property name="enableSubPackages" value="false"/>
        </javaClientGenerator>

        <!-- 指定要逆向分析哪些表：根据表要创建javaBean及其mapper接口与映射文件
   domainObjectName：指定生成的JavaBean的类名
   schema：指定数据库
-->
        <table tableName="ornament_inventory" domainObjectName="OrnamentInventory" schema="csgo">
            <!-- 用于指定生成实体类时是否使用实际的列名作为实体类的属性名。false是 Camel Case驼峰命名法风格，如表中last_name字段对应的就是Java类的lastName属性-->
            <property name="useActualColumnNames" value="false"></property>
        </table>
        <table tableName="ornament_purchase_record" domainObjectName="OrnamentPurchaseRecord" schema="csgo">
            <!-- 用于指定生成实体类时是否使用实际的列名作为实体类的属性名。false是 Camel Case驼峰命名法风格，如表中last_name字段对应的就是Java类的lastName属性-->
            <property name="useActualColumnNames" value="false"></property>
        </table>
        <table tableName="ornament_sell_record" domainObjectName="OrnamentSellRecord" schema="csgo">
            <!-- 用于指定生成实体类时是否使用实际的列名作为实体类的属性名。false是 Camel Case驼峰命名法风格，如表中last_name字段对应的就是Java类的lastName属性-->
            <property name="useActualColumnNames" value="false"></property>
        </table>

    </context>
</generatorConfiguration>